/// SOURCES ///


https://stackoverflow.com/questions/9834086/what-is-a-simple-explanation-for-how-pipes-work-in-bash


/// SUBJECT ///
Your shell should:
• Not interpret unclosed quotes or unspecified special characters like \ or ;.
• Not use more than one global variable, think about it and be ready to explain why
you do it.
• Show a prompt when waiting for a new command.
• Have a working History.
• Search and launch the right executable (based on the PATH variable or by using
relative or absolute path)
• It must implement the builtins:
◦ echo with option -n
◦ cd with only a relative or absolute path
◦ pwd with no options
4
Minishell As beautiful as a shell
◦ export with no options
◦ unset with no options
◦ env with no options or arguments
◦ exit with no options
• ’ inhibit all interpretation of a sequence of characters.
• " inhibit all interpretation of a sequence of characters except for $.
• Redirections:
◦ < should redirect input.
◦ > should redirect output.
◦ “<<” read input from the current source until a line containing only the delimiter is seen. it doesn’t need to update history!
◦ “>>” should redirect output with append mode.
• Pipes | The output of each command in the pipeline is connected via a pipe to the
input of the next command.
• Environment variables ($ followed by characters) should expand to their values.
• $? should expand to the exit status of the most recently executed foreground
pipeline.
• ctrl-C ctrl-D ctrl-\ should work like in bash.
• When interactive:
◦ ctrl-C print a new prompt on a newline.
◦ ctrl-D exit the shell.
◦ ctrl-\ do nothing.

todo ::
	signaux ya des truc pas clair pour ctrl+\ et valgrind

"""
minishell : export woirg
minishell : env | grep woi
minishell : export woirg=WTF
minishell : env | grep woi
woirg=WTF
minishell : echo $woinrg

minishell : echo $woirg
WTF
minishell : unset woirg
minishell : echo $woirg

minishell : env | grep woi
minishell : export | grep woi
minishell : cd ..
minishell : cd 
.git/      minishell/ philo/     
minishell : cd minishell/objs/
minishell : ls
builtins  error.o  exec  main.o  parsing
minishell : cd ..
minishell : exit
==26476== 
==26476== HEAP SUMMARY:
==26476==     in use at exit: 205,637 bytes in 274 blocks
==26476==   total heap usage: 1,586 allocs, 1,312 frees, 567,773 bytes allocated
==26476== 
==26476== LEAK SUMMARY:
==26476==    definitely lost: 32 bytes in 1 blocks
==26476==    indirectly lost: 0 bytes in 0 blocks
==26476==      possibly lost: 0 bytes in 0 blocks
==26476==    still reachable: 205,605 bytes in 273 blocks
==26476==         suppressed: 0 bytes in 0 blocks
==26476== Rerun with --leak-check=full to see details of leaked memory
==26476== 
==26476== Use --track-origins=yes to see where uninitialised values come from
==26476== For lists of detected and suppressed errors, rerun with: -s

// WITH EXPORT

==26476== Syscall param wait4(pid) contains uninitialised byte(s)
==26476==    at 0x4997DBA: wait4 (wait4.c:27)
==26476==    by 0x402831: launch_processes (in /mnt/nfs/homes/adesvall/Documents/cercle4_42cursus/minishell/minishell)
==26476==    by 0x401D0D: parse_line (in /mnt/nfs/homes/adesvall/Documents/cercle4_42cursus/minishell/minishell)
==26476==    by 0x4014E8: main (in /mnt/nfs/homes/adesvall/Documents/cercle4_42cursus/minishell/minishell)